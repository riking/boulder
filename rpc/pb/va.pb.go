// Code generated by protoc-gen-go.
// source: rpc/pb/va.proto
// DO NOT EDIT!

package pb

import proto "github.com/letsencrypt/boulder/Godeps/_workspace/src/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "github.com/letsencrypt/boulder/Godeps/_workspace/src/golang.org/x/net/context"
	grpc "github.com/letsencrypt/boulder/Godeps/_workspace/src/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PerformValidationRequest struct {
	Domain    string       `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Challenge *VAChallenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
	Authz     *AuthzMeta   `protobuf:"bytes,3,opt,name=authz" json:"authz,omitempty"`
}

func (m *PerformValidationRequest) Reset()                    { *m = PerformValidationRequest{} }
func (m *PerformValidationRequest) String() string            { return proto.CompactTextString(m) }
func (*PerformValidationRequest) ProtoMessage()               {}
func (*PerformValidationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PerformValidationRequest) GetChallenge() *VAChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *PerformValidationRequest) GetAuthz() *AuthzMeta {
	if m != nil {
		return m.Authz
	}
	return nil
}

// VAChallenge contains just the fields of core.Challenge that the VA needs
type VAChallenge struct {
	Id               int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Token            string            `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountKey       string            `protobuf:"bytes,4,opt,name=accountKey" json:"accountKey,omitempty"`
	KeyAuthorization *KeyAuthorization `protobuf:"bytes,5,opt,name=keyAuthorization" json:"keyAuthorization,omitempty"`
}

func (m *VAChallenge) Reset()                    { *m = VAChallenge{} }
func (m *VAChallenge) String() string            { return proto.CompactTextString(m) }
func (*VAChallenge) ProtoMessage()               {}
func (*VAChallenge) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *VAChallenge) GetKeyAuthorization() *KeyAuthorization {
	if m != nil {
		return m.KeyAuthorization
	}
	return nil
}

type AuthzMeta struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RegID int64  `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
}

func (m *AuthzMeta) Reset()                    { *m = AuthzMeta{} }
func (m *AuthzMeta) String() string            { return proto.CompactTextString(m) }
func (*AuthzMeta) ProtoMessage()               {}
func (*AuthzMeta) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type ValidationRecords struct {
	Records []*ValidationRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *ValidationRecords) Reset()                    { *m = ValidationRecords{} }
func (m *ValidationRecords) String() string            { return proto.CompactTextString(m) }
func (*ValidationRecords) ProtoMessage()               {}
func (*ValidationRecords) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ValidationRecords) GetRecords() []*ValidationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type ValidationRecord struct {
	Hostname          string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Port              string   `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	AddressesResolved []string `protobuf:"bytes,3,rep,name=addressesResolved" json:"addressesResolved,omitempty"`
	AddressUsed       string   `protobuf:"bytes,4,opt,name=addressUsed" json:"addressUsed,omitempty"`
	Authorities       []string `protobuf:"bytes,5,rep,name=authorities" json:"authorities,omitempty"`
	Url               string   `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
}

func (m *ValidationRecord) Reset()                    { *m = ValidationRecord{} }
func (m *ValidationRecord) String() string            { return proto.CompactTextString(m) }
func (*ValidationRecord) ProtoMessage()               {}
func (*ValidationRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func init() {
	proto.RegisterType((*PerformValidationRequest)(nil), "pb.PerformValidationRequest")
	proto.RegisterType((*VAChallenge)(nil), "pb.VAChallenge")
	proto.RegisterType((*AuthzMeta)(nil), "pb.AuthzMeta")
	proto.RegisterType((*ValidationRecords)(nil), "pb.ValidationRecords")
	proto.RegisterType((*ValidationRecord)(nil), "pb.ValidationRecord")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for VA service

type VAClient interface {
	IsSafeDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Valid, error)
	PerformValidation(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*ValidationRecords, error)
}

type vAClient struct {
	cc *grpc.ClientConn
}

func NewVAClient(cc *grpc.ClientConn) VAClient {
	return &vAClient{cc}
}

func (c *vAClient) IsSafeDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Valid, error) {
	out := new(Valid)
	err := grpc.Invoke(ctx, "/pb.VA/IsSafeDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vAClient) PerformValidation(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*ValidationRecords, error) {
	out := new(ValidationRecords)
	err := grpc.Invoke(ctx, "/pb.VA/PerformValidation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VA service

type VAServer interface {
	IsSafeDomain(context.Context, *Domain) (*Valid, error)
	PerformValidation(context.Context, *PerformValidationRequest) (*ValidationRecords, error)
}

func RegisterVAServer(s *grpc.Server, srv VAServer) {
	s.RegisterService(&_VA_serviceDesc, srv)
}

func _VA_IsSafeDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(VAServer).IsSafeDomain(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _VA_PerformValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PerformValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(VAServer).PerformValidation(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _VA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VA",
	HandlerType: (*VAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsSafeDomain",
			Handler:    _VA_IsSafeDomain_Handler,
		},
		{
			MethodName: "PerformValidation",
			Handler:    _VA_PerformValidation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xdb, 0x6e, 0xd3, 0x40,
	0x14, 0xac, 0xe3, 0x26, 0xe0, 0x13, 0xa0, 0xc9, 0x51, 0x41, 0x56, 0x84, 0x50, 0x65, 0x1e, 0xe0,
	0x01, 0x52, 0x51, 0x7e, 0x80, 0xa8, 0x7d, 0x29, 0x15, 0x12, 0x5a, 0x44, 0xde, 0x37, 0xf6, 0x69,
	0x63, 0xd5, 0xf1, 0x9a, 0xdd, 0x75, 0x25, 0xf7, 0x03, 0xf8, 0x17, 0x7e, 0x84, 0xef, 0x62, 0x2f,
	0x76, 0x6a, 0x25, 0xf4, 0x6d, 0xce, 0xcc, 0xac, 0x77, 0x76, 0x7c, 0xe0, 0x48, 0x56, 0xe9, 0x69,
	0xb5, 0x3a, 0xbd, 0xe3, 0xf3, 0x4a, 0x0a, 0x2d, 0x70, 0x50, 0xad, 0x66, 0xd3, 0x96, 0x4c, 0x85,
	0x24, 0x4f, 0x27, 0xbf, 0x03, 0x88, 0xbf, 0x93, 0xbc, 0x16, 0x72, 0xb3, 0xe4, 0x45, 0x9e, 0x71,
	0x9d, 0x8b, 0x92, 0xd1, 0xaf, 0x9a, 0x94, 0xc6, 0x57, 0x30, 0xca, 0xc4, 0x86, 0xe7, 0x65, 0x1c,
	0x9c, 0x04, 0xef, 0x23, 0xd6, 0x4e, 0xf8, 0x11, 0xa2, 0x74, 0xcd, 0x8b, 0x82, 0xca, 0x1b, 0x8a,
	0x07, 0x46, 0x1a, 0x9f, 0x1d, 0xcd, 0xab, 0xd5, 0x7c, 0xb9, 0x38, 0xef, 0x68, 0xf6, 0xe0, 0xc0,
	0xb7, 0x30, 0xe4, 0xb5, 0x5e, 0xdf, 0xc7, 0xa1, 0xb3, 0x3e, 0xb7, 0xd6, 0x85, 0x25, 0xbe, 0x91,
	0xe6, 0xcc, 0x6b, 0xc9, 0x9f, 0x00, 0xc6, 0xbd, 0xf3, 0xf8, 0x02, 0x06, 0x79, 0xe6, 0xee, 0x0d,
	0x99, 0x41, 0x88, 0x70, 0xa8, 0x9b, 0xca, 0x5f, 0x17, 0x31, 0x87, 0xf1, 0x18, 0x86, 0x5a, 0xdc,
	0x52, 0xe9, 0x3e, 0x1c, 0x31, 0x3f, 0xe0, 0x1b, 0x00, 0x9e, 0xa6, 0xa2, 0x2e, 0xf5, 0x15, 0x35,
	0xf1, 0xa1, 0x93, 0x7a, 0x0c, 0x7e, 0x81, 0xc9, 0x2d, 0x35, 0x36, 0x80, 0x90, 0xf9, 0xbd, 0x7b,
	0x70, 0x3c, 0x74, 0xc9, 0x8e, 0x6d, 0xb2, 0xab, 0x1d, 0x8d, 0xed, 0xb9, 0x93, 0x4f, 0x10, 0x6d,
	0xf3, 0xf7, 0x82, 0x46, 0x2e, 0xa8, 0x09, 0x25, 0xe9, 0xe6, 0xf2, 0xc2, 0x25, 0x0d, 0x99, 0x1f,
	0x92, 0x73, 0x98, 0xf6, 0xfb, 0x35, 0x7f, 0x20, 0x53, 0x38, 0x87, 0x27, 0xd2, 0x43, 0x73, 0x3e,
	0xec, 0x02, 0xec, 0xfa, 0x58, 0x67, 0x4a, 0xfe, 0x06, 0x30, 0xd9, 0x55, 0x71, 0x06, 0x4f, 0xd7,
	0x42, 0xe9, 0x92, 0x6f, 0xa8, 0x4d, 0xb1, 0x9d, 0x6d, 0x69, 0x95, 0x90, 0xba, 0x2b, 0xcd, 0x62,
	0xfc, 0x00, 0x53, 0x9e, 0x65, 0x92, 0x94, 0x22, 0xc5, 0x48, 0x89, 0xe2, 0x8e, 0x32, 0x53, 0x60,
	0x68, 0x0c, 0xfb, 0x02, 0x9e, 0xc0, 0xb8, 0x25, 0x7f, 0x2a, 0xe3, 0xf3, 0x6d, 0xf6, 0x29, 0xe7,
	0xf0, 0xed, 0xe8, 0x9c, 0x94, 0x69, 0x32, 0x74, 0x8e, 0x07, 0x0a, 0x27, 0x10, 0xd6, 0xb2, 0x88,
	0x47, 0xee, 0xac, 0x85, 0x67, 0x0d, 0x0c, 0x96, 0x0b, 0x7c, 0x07, 0xcf, 0x2e, 0xd5, 0x0f, 0x7e,
	0x4d, 0x17, 0x7e, 0xad, 0xc0, 0xbe, 0xde, 0xe3, 0x59, 0xb4, 0x6d, 0x22, 0x39, 0xc0, 0xaf, 0x30,
	0xdd, 0xdb, 0x51, 0x7c, 0x6d, 0x1d, 0x8f, 0xad, 0xee, 0xec, 0xe5, 0xff, 0x9a, 0x54, 0xc9, 0xc1,
	0x6a, 0xe4, 0xf6, 0xfe, 0xf3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xc4, 0x86, 0x7d, 0x21,
	0x03, 0x00, 0x00,
}
