// Code generated by protoc-gen-go.
// source: rpc/pb/va.proto
// DO NOT EDIT!

package pb

import proto "github.com/letsencrypt/boulder/Godeps/_workspace/src/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Domain struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Valid struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *Valid) Reset()                    { *m = Valid{} }
func (m *Valid) String() string            { return proto.CompactTextString(m) }
func (*Valid) ProtoMessage()               {}
func (*Valid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PerformValidationRequest struct {
	Domain    string       `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Challenge *VAChallenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
	Authz     *AuthzMeta   `protobuf:"bytes,3,opt,name=authz" json:"authz,omitempty"`
}

func (m *PerformValidationRequest) Reset()                    { *m = PerformValidationRequest{} }
func (m *PerformValidationRequest) String() string            { return proto.CompactTextString(m) }
func (*PerformValidationRequest) ProtoMessage()               {}
func (*PerformValidationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PerformValidationRequest) GetChallenge() *VAChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *PerformValidationRequest) GetAuthz() *AuthzMeta {
	if m != nil {
		return m.Authz
	}
	return nil
}

// VAChallenge contains just the fields of core.Challenge that the VA needs
type VAChallenge struct {
	Id               int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Token            string            `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountKey       string            `protobuf:"bytes,4,opt,name=accountKey" json:"accountKey,omitempty"`
	KeyAuthorization *KeyAuthorization `protobuf:"bytes,5,opt,name=keyAuthorization" json:"keyAuthorization,omitempty"`
}

func (m *VAChallenge) Reset()                    { *m = VAChallenge{} }
func (m *VAChallenge) String() string            { return proto.CompactTextString(m) }
func (*VAChallenge) ProtoMessage()               {}
func (*VAChallenge) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *VAChallenge) GetKeyAuthorization() *KeyAuthorization {
	if m != nil {
		return m.KeyAuthorization
	}
	return nil
}

type KeyAuthorization struct {
	Token      string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Thumbprint string `protobuf:"bytes,2,opt,name=thumbprint" json:"thumbprint,omitempty"`
}

func (m *KeyAuthorization) Reset()                    { *m = KeyAuthorization{} }
func (m *KeyAuthorization) String() string            { return proto.CompactTextString(m) }
func (*KeyAuthorization) ProtoMessage()               {}
func (*KeyAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type AuthzMeta struct {
	Id    int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RegID int64 `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
}

func (m *AuthzMeta) Reset()                    { *m = AuthzMeta{} }
func (m *AuthzMeta) String() string            { return proto.CompactTextString(m) }
func (*AuthzMeta) ProtoMessage()               {}
func (*AuthzMeta) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type ValidationRecords struct {
	Records []*ValidationRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *ValidationRecords) Reset()                    { *m = ValidationRecords{} }
func (m *ValidationRecords) String() string            { return proto.CompactTextString(m) }
func (*ValidationRecords) ProtoMessage()               {}
func (*ValidationRecords) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ValidationRecords) GetRecords() []*ValidationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type ValidationRecord struct {
	Hostname          string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Port              string   `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	AddressesResolved []string `protobuf:"bytes,3,rep,name=addressesResolved" json:"addressesResolved,omitempty"`
	AddressUsed       string   `protobuf:"bytes,4,opt,name=addressUsed" json:"addressUsed,omitempty"`
	Authorities       []string `protobuf:"bytes,5,rep,name=authorities" json:"authorities,omitempty"`
	Url               string   `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
}

func (m *ValidationRecord) Reset()                    { *m = ValidationRecord{} }
func (m *ValidationRecord) String() string            { return proto.CompactTextString(m) }
func (*ValidationRecord) ProtoMessage()               {}
func (*ValidationRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func init() {
	proto.RegisterType((*Domain)(nil), "pb.Domain")
	proto.RegisterType((*Valid)(nil), "pb.Valid")
	proto.RegisterType((*PerformValidationRequest)(nil), "pb.PerformValidationRequest")
	proto.RegisterType((*VAChallenge)(nil), "pb.VAChallenge")
	proto.RegisterType((*KeyAuthorization)(nil), "pb.KeyAuthorization")
	proto.RegisterType((*AuthzMeta)(nil), "pb.AuthzMeta")
	proto.RegisterType((*ValidationRecords)(nil), "pb.ValidationRecords")
	proto.RegisterType((*ValidationRecord)(nil), "pb.ValidationRecord")
}

var fileDescriptor1 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xe3, 0x26, 0xd4, 0x13, 0xa0, 0xc9, 0xa8, 0x20, 0x2b, 0x2a, 0xa8, 0x5a, 0x1e, 0xe0,
	0x01, 0x52, 0x51, 0x2e, 0x40, 0xd4, 0x3e, 0x50, 0x2a, 0x24, 0xb4, 0x88, 0xbc, 0xaf, 0xed, 0x6d,
	0x63, 0xd5, 0xf1, 0x9a, 0xdd, 0x75, 0xa4, 0xf4, 0x00, 0xdc, 0x85, 0x8b, 0x70, 0x2e, 0xf6, 0xc7,
	0x49, 0x2c, 0x87, 0xbe, 0x7d, 0x33, 0xf3, 0xcd, 0xf8, 0xfb, 0x66, 0xbc, 0x70, 0x2c, 0xab, 0xf4,
	0xbc, 0x4a, 0xce, 0x57, 0x6c, 0x5a, 0x49, 0xa1, 0x05, 0xf6, 0xaa, 0x84, 0x9c, 0xc2, 0xe0, 0x4a,
	0x2c, 0x59, 0x5e, 0x22, 0xc2, 0x61, 0xc9, 0x96, 0x3c, 0x0e, 0xce, 0x82, 0x77, 0x11, 0x75, 0x98,
	0xbc, 0x82, 0xfe, 0x9c, 0x15, 0x79, 0x86, 0x27, 0xd0, 0x5f, 0x59, 0xe0, 0xaa, 0x47, 0xd4, 0x07,
	0xe4, 0x77, 0x00, 0xf1, 0x77, 0x2e, 0x6f, 0x85, 0x5c, 0x3a, 0x1a, 0xd3, 0xb9, 0x28, 0x29, 0xff,
	0x55, 0x73, 0xa5, 0xf1, 0x25, 0x0c, 0x32, 0x37, 0xb9, 0x99, 0xd8, 0x44, 0xf8, 0x01, 0xa2, 0x74,
	0xc1, 0x8a, 0x82, 0x97, 0x77, 0x3c, 0xee, 0x99, 0xd2, 0xf0, 0xe2, 0x78, 0x5a, 0x25, 0xd3, 0xf9,
	0xec, 0x72, 0x93, 0xa6, 0x3b, 0x06, 0xbe, 0x81, 0x3e, 0xab, 0xf5, 0xe2, 0x21, 0x0e, 0x1d, 0xf5,
	0x99, 0xa5, 0xce, 0x6c, 0xe2, 0x1b, 0xd7, 0x8c, 0xfa, 0x1a, 0xf9, 0x13, 0xc0, 0xb0, 0xd5, 0x8f,
	0xcf, 0xa1, 0xd7, 0x68, 0x0d, 0xa9, 0x41, 0xd6, 0x9b, 0x5e, 0x57, 0xfe, 0x73, 0xc6, 0x9b, 0xc5,
	0xd6, 0x92, 0x16, 0xf7, 0xbc, 0x74, 0x83, 0x23, 0xea, 0x03, 0x7c, 0x0d, 0xc0, 0xd2, 0x54, 0xd4,
	0xa5, 0xbe, 0xe1, 0xeb, 0xf8, 0xd0, 0x95, 0x5a, 0x19, 0xfc, 0x0c, 0xa3, 0x7b, 0xbe, 0xb6, 0x02,
	0x84, 0xcc, 0x1f, 0x9c, 0xe1, 0xb8, 0xef, 0x94, 0x9d, 0x58, 0x65, 0x37, 0x9d, 0x1a, 0xdd, 0x63,
	0x93, 0x2f, 0x30, 0xea, 0xb2, 0x76, 0x5a, 0x82, 0x8e, 0x16, 0xbd, 0xa8, 0x97, 0x49, 0x25, 0xf3,
	0x52, 0x37, 0xda, 0x5b, 0x19, 0xf2, 0x11, 0xa2, 0xed, 0x26, 0xf6, 0x2c, 0x9b, 0x91, 0x92, 0xdf,
	0x5d, 0x5f, 0xb9, 0xbe, 0x90, 0xfa, 0x80, 0x5c, 0xc2, 0xb8, 0x7d, 0xa9, 0x54, 0xc8, 0x4c, 0xe1,
	0x14, 0x9e, 0x48, 0x0f, 0x4d, 0x7f, 0xb8, 0xb1, 0xd2, 0xe5, 0xd1, 0x0d, 0x89, 0xfc, 0x0d, 0x60,
	0xd4, 0xad, 0xe2, 0x04, 0x8e, 0x16, 0x42, 0xe9, 0xd6, 0x2f, 0xb4, 0x8d, 0xed, 0xfa, 0x2b, 0x21,
	0x37, 0x16, 0x1c, 0xc6, 0xf7, 0x30, 0x66, 0x59, 0x26, 0xb9, 0x52, 0x5c, 0x51, 0xae, 0x44, 0xb1,
	0xe2, 0x99, 0x39, 0x45, 0x68, 0x08, 0xfb, 0x05, 0x3c, 0x83, 0x61, 0x93, 0xfc, 0xa9, 0x0c, 0xcf,
	0xdf, 0xa5, 0x9d, 0x72, 0x0c, 0xbf, 0x53, 0x9d, 0x73, 0x65, 0x6e, 0x12, 0x3a, 0xc6, 0x2e, 0x85,
	0x23, 0x08, 0x6b, 0x59, 0xc4, 0x03, 0xd7, 0x6b, 0xe1, 0xc5, 0x1a, 0x7a, 0xf3, 0x19, 0xbe, 0x85,
	0xa7, 0xd7, 0xea, 0x07, 0xbb, 0xe5, 0xcd, 0x43, 0x00, 0xeb, 0xde, 0xe3, 0x49, 0xb4, 0xdd, 0x04,
	0x39, 0xc0, 0xaf, 0x30, 0xde, 0xfb, 0xdb, 0xf1, 0xd4, 0x32, 0x1e, 0x7b, 0x04, 0x93, 0x17, 0xff,
	0xdb, 0xa4, 0x22, 0x07, 0xc9, 0xc0, 0x3d, 0xc1, 0x4f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0x6e, 0x35, 0x3c, 0x95, 0x03, 0x00, 0x00,
}
