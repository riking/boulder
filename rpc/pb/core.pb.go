// Code generated by protoc-gen-go.
// source: rpc/pb/core.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	rpc/pb/core.proto
	rpc/pb/va.proto

It has these top-level messages:
	KeyAuthorization
	Domain
	Valid
	ProblemDetails
	PerformValidationRequest
	VAChallenge
	AuthzMeta
	ValidationRecords
	ValidationRecord
*/
package pb

import proto "github.com/letsencrypt/boulder/Godeps/_workspace/src/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type KeyAuthorization struct {
	Token      string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Thumbprint string `protobuf:"bytes,2,opt,name=thumbprint" json:"thumbprint,omitempty"`
}

func (m *KeyAuthorization) Reset()                    { *m = KeyAuthorization{} }
func (m *KeyAuthorization) String() string            { return proto.CompactTextString(m) }
func (*KeyAuthorization) ProtoMessage()               {}
func (*KeyAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Domain struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Valid struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *Valid) Reset()                    { *m = Valid{} }
func (m *Valid) String() string            { return proto.CompactTextString(m) }
func (*Valid) ProtoMessage()               {}
func (*Valid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ProblemDetails struct {
	ProblemType string `protobuf:"bytes,1,opt,name=problemType" json:"problemType,omitempty"`
	Detail      string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
	HttpStatus  int32  `protobuf:"varint,3,opt,name=httpStatus" json:"httpStatus,omitempty"`
}

func (m *ProblemDetails) Reset()                    { *m = ProblemDetails{} }
func (m *ProblemDetails) String() string            { return proto.CompactTextString(m) }
func (*ProblemDetails) ProtoMessage()               {}
func (*ProblemDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*KeyAuthorization)(nil), "pb.KeyAuthorization")
	proto.RegisterType((*Domain)(nil), "pb.Domain")
	proto.RegisterType((*Valid)(nil), "pb.Valid")
	proto.RegisterType((*ProblemDetails)(nil), "pb.ProblemDetails")
}

var fileDescriptor0 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0xc1, 0x4a, 0xc6, 0x30,
	0x10, 0x84, 0x69, 0xb5, 0x45, 0x57, 0x10, 0x0d, 0x22, 0x3d, 0xa8, 0x94, 0x9c, 0x3c, 0xd9, 0x83,
	0x4f, 0x20, 0xf4, 0x20, 0x78, 0x91, 0x2a, 0xde, 0x93, 0x36, 0xd0, 0x68, 0x93, 0x5d, 0xd2, 0xad,
	0x50, 0x9f, 0xde, 0xbf, 0x69, 0x7f, 0xe8, 0x6d, 0xe6, 0x9b, 0x64, 0x98, 0x85, 0xeb, 0x40, 0x6d,
	0x45, 0xba, 0x6a, 0x31, 0x98, 0x27, 0x0a, 0xc8, 0x28, 0x52, 0xd2, 0xf2, 0x15, 0xae, 0xde, 0xcc,
	0xfc, 0x32, 0x71, 0x8f, 0xc1, 0xfe, 0x29, 0xb6, 0xe8, 0xc5, 0x0d, 0x64, 0x8c, 0x3f, 0xc6, 0x17,
	0x49, 0x99, 0x3c, 0x9e, 0x37, 0xab, 0x11, 0x0f, 0x00, 0xdc, 0x4f, 0x4e, 0x53, 0xb0, 0x9e, 0x8b,
	0x34, 0x46, 0x3b, 0x22, 0xef, 0x20, 0xaf, 0xd1, 0x29, 0xeb, 0x85, 0x80, 0x53, 0xaf, 0x9c, 0xd9,
	0xbe, 0x47, 0x2d, 0xef, 0x21, 0xfb, 0x52, 0x83, 0xed, 0x96, 0xf2, 0xdf, 0x45, 0xc4, 0xf4, 0xac,
	0x59, 0x8d, 0xfc, 0x86, 0xcb, 0xf7, 0x80, 0x7a, 0x30, 0xae, 0x36, 0xac, 0xec, 0x30, 0x8a, 0x12,
	0x2e, 0x68, 0x25, 0x9f, 0x33, 0x1d, 0xbb, 0xf6, 0x48, 0xdc, 0x42, 0xde, 0xc5, 0xc7, 0xdb, 0x98,
	0xcd, 0x2d, 0x43, 0x7b, 0x66, 0xfa, 0x60, 0xc5, 0xd3, 0x58, 0x9c, 0x1c, 0xb2, 0xac, 0xd9, 0x11,
	0x9d, 0xc7, 0xeb, 0x9f, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xa4, 0xd3, 0x83, 0x12, 0x01,
	0x00, 0x00,
}
